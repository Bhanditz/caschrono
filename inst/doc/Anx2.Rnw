%\VignetteIndexEntry{Annexe Chapitre 2}
%\VignetteDepends{}
%\VignetteKeywords{ts}
%\VignettePackage{caschrono}
\documentclass{article}
\usepackage{Sweave}
\usepackage{times}
\usepackage{mathptm}
\usepackage{hyperref}
\usepackage{natbib}
\usepackage{pratiquer}
\setkeys{Gin}{width=0.95\textwidth}
\renewcommand{\thefootnote}{\fnsymbol{footnote}}

\DeclareMathOperator*{\argmax}{argmax}
\DeclareMathOperator*{\argmin}{argmin}
\DeclareMathOperator{\BB}{BB}
\DeclareMathOperator{\BBN}{BBN}
\DeclareMathOperator{\rang}{rang}
\DeclareMathOperator{\tr}{tr}
\DeclareMathOperator{\V}{V}
\DeclareMathOperator{\C}{Cov}
\DeclareMathOperator{\Prob}{Pr}
\DeclareMathOperator{\diag}{diag}
\def\agra{\boldsymbol{a}} % a grave
%
\def\alg{\boldsymbol{\alpha}}
\def\b{\mbox{\bf b}}
%
\def\B{\mbox{\bf B}}
\def\BB#1{\mbox{BB}(0,\sigma_{#1}^2)}
\def\bm{\mbox{B}}
\def\betg{\boldsymbol{\beta}}
\def\bar#1#2{\overline{#1}_{#2}} % surligné indicé
\def\bgr{\mbox{\bf b}}
\def\bla{\mbox{~}}
\def\blb{\mbox{~~}}
%
\def\card{\mbox{card}}
\def\corr{\mbox{corr}}
\def\cov{\mbox{\sf cov}}
\def\cv{\mbox{CV}}
%
\def\D{\mbox{\bf D}}
\def\d{\bf d}
\def\degr{^{\circ}}
\def\deltag{\boldsymbol{\delta}}
\def\Deltag{\boldsymbol{\Delta}} % ligne 64
\def\diag{\mbox{diag}}
\def\dir{\mbox{\tiny{DIR}}}
\def\dsp{\displaystyle}
%
\def\e{\mbox{\bf e}}
\def\eps{{\bf \epsilon}}
\def\esp{\mbox{\sf E}}
\def\eti{\tilde{\epsilon}}

\def\F{\mbox{\bf F}}
\def\g{\mbox{\bf g}}
\def\gamg{\boldsymbol{\Gamma}}
\def\gamgp{\boldsymbol{\gamma}}
\def\hors{\mathbin{\in\mkern-12mu/}}

\def\I{\mbox{\bf I}}
\def\indic{\mathrm{I\mkern-8muI}}
\def\ie{c'est-à-dire}
\def\iid{\sim_{\mbox{i.i.d.}}}
\def\lm{\mbox{L}}

\def\mapsous#1{\smash{ \mathop{\longrightarrow}\limits_{#1}}} %
\def\mapsur#1{\smash{ \mathop{\longrightarrow}\limits^{#1}}}  %
\def\M{\mbox{\bf M}}
\def\mug{\boldsymbol{\mu}}
\def\nor{\mathcal{N}}
\def\nug{\boldsymbol{\nu}}
\def\Nx{\mbox{\bf N}}
\def\P{\mbox{\bf P}}
\def\Phig{\boldsymbol{\Phi}}
\def\phig{\boldsymbol{\phi}}
\def\poi{\mbox{\cal P}}
\def\pr{\mbox{Pr}}
\def\prim{^{\boldsymbol{\prime}}}
\def\px{\mbox{\bf x}}

\def\Rho{\boldsymbol{\rho}}
\def\rl{\mathbin{I\mkern-8muR}} % Reel
\def\RR{\textsf{R}\/}

\newcommand{\sig}[2]{\Sigma_{{#1},{#2}}}
\def \sitst{\textsf{SiteST}\/}
\def\SP{\texttt{S-PLUS}\/}
\def\T{\mbox{\bf T}}
\def\tr{\triangle}
\def\t{\mbox{\bf t}}
\def\tra{\mbox{tr}}

\def\U{\mbox{\bf U}}
\def\Unif{\emph{Unif}}
\def\u{\mbox{\bf u}}
\def\v{\mbox{\bf v}}

\def\w{\mbox{\bf w}}
\def\var{\mbox{\sf var}}
\def\W{\mbox{\bf W}}
\def\X{\textbf{X}}
\def\x{\textbf{x}}

\def\Y{\textbf{Y}}
\def\yg{\textbf{y}}
\def\y0{y^0}

\def\Z{\textbf{Z}}
\def\z{ \textbf{z}}
\def\zer{\large{0}}
%%%%%%%%%%%%%%%%%%%%%%%%%%%
\urlstyle{sf}
\def\rmdefault{cmr}

%%%% pour les chiffres des équations
\makeatletter
\renewcommand\theequation{\thesection.\arabic{equation}}
\@addtoreset{equation}{section}
\makeatother



\title{\RR~pour les séries temporelles (compléments du Chapitre 2)}
\author{Yves Aragon\footnote{aragon@cict.fr} \cr
{\normalsize Université Toulouse 1 Capitole} }
\begin{document}
\maketitle
\setcounter{section}{2}
\renewcommand{\thefootnote}{\arabic{footnote}}



\SweaveOpts{keep.source=TRUE}
<<echo=FALSE>>=
owidth <- getOption("width") # largeur des sorties
options(width=60, continue="+ ","warn"=-1 )
.PngNo <- 0
nom.fich = "./Figures/anx2-bitmap-"
@
%
@
%
\SweaveOpts{keep.source=TRUE}
%
% les différents types de graphiques
%  ancien
<<label=bfig,echo=FALSE,eval=FALSE>>=
.PngNo <- .PngNo + 1; file = paste(nom.fich, .PngNo, sep="")
pdf(file=paste(file,".pdf",sep=""), width = 7, height = 7, pointsize = 12, bg = "white")
@

<<label=bfigps,echo=FALSE,eval=FALSE>>=
postscript(file=paste(file,".ps",sep=""), width = 7, height = 7, pointsize = 12, bg = "white",horizontal= FALSE,paper="special")
@


% 1111111111111
<<label=bfig1,echo=FALSE,eval=FALSE>>=
.PngNo <- .PngNo + 1; file = paste(nom.fich, .PngNo, sep="")
pdf(file=paste(file,".pdf",sep=""), width = 5, height = 2, pointsize = 10, bg = "white")
@

<<label=bfigps1,echo=FALSE,eval=FALSE>>=
postscript(file=paste(file,".ps",sep=""),  width = 5, height =2, pointsize = 10, bg = "white",horizontal= FALSE,paper="special")
@
% 222222222222222
<<label=bfig2,echo=FALSE,eval=FALSE>>=
.PngNo <- .PngNo + 1; file = paste(nom.fich, .PngNo, sep="")
pdf(file=paste(file,".pdf",sep=""), width = 3.9, height = 3.1, pointsize = 10, bg = "white")
@

<<label=bfigps2,echo=FALSE,eval=FALSE>>=
postscript(file=paste(file,".ps",sep=""), width = 3.9, height = 3.1,   pointsize = 10, bg = "white",horizontal= FALSE,paper="special")
@
%   3333333333333333333333333333

<<label=bfig3,echo=FALSE,eval=FALSE>>=
.PngNo <- .PngNo + 1; file = paste(nom.fich, .PngNo, sep="")
pdf(file=paste(file,".pdf",sep=""), width = 5.92, height = 6.74, pointsize = 10, bg = "white")
@
<<label=bfigps3,echo=FALSE,eval=FALSE>>=
postscript(file=paste(file,".ps",sep=""), width = 5.92, height = 6.74, pointsize = 10, bg = "white",horizontal= FALSE,paper="special")
@

<<label=bfig4,echo=FALSE,eval=FALSE>>=
.PngNo <- .PngNo + 1; file = paste(nom.fich, .PngNo, sep="")
pdf(file=paste(file,".pdf",sep=""), width = 6, height = 6, pointsize = 10, bg = "white")
@
<<label=bfigps4,echo=FALSE,eval=FALSE>>=
postscript(file=paste(file,".ps",sep=""), width = 6, height = 6, pointsize = 10, bg = "white",horizontal= FALSE,paper="special")
@

<<label=zfig2,echo=FALSE,eval=FALSE>>=
dev.null <- dev.off()
@

<<label=zfiginclude,echo=FALSE,eval=FALSE>>=
cat("\\includegraphics[width=0.9\\textwidth]{", file, "}\n\n", sep="")
@ 

\subsection{Obtenir de l'aide sur \RR}
Le moteur de recherche intégré à \RR~permet d'obtenir facilement de l'aide. On l'a indiqué dans l'introduction, \RR~comporte de nombreux packages, certains font partie
de la distribution, d'autres doivent être \emph{installés} par l'utilisateur, généralement depuis un site miroir de CRAN. Mais il ne peut s'en servir que s'ils sont   \emph{chargés} et
l'aide en ligne ne concerne que les fonctions
 des packages chargés.  Examinons quelques situations.
\begin{trivlist}

  \item[\textbf{1}] Si l'on connaît le nom de la fonction sur laquelle on veut de l'aide et si elle fait partie d'un package chargé
  sur la machine, on utilise indifféremment \code{?} ou \code{help()}, ainsi :

{\small
<<eval=FALSE>>=
?aggregate
help(aggregate)
@
}
\noindent
donnent l'un ou l'autre la syntaxe et des exemples de   \code{aggregate()} ainsi que des liens vers des questions connexes.
Si une fonction appartient à un package non installé, il faut d'abord l'installer pour avoir de l'aide sur ses fonctions.
  \item[\textbf{2}] Si on n'a pas de nom de fonction mais qu'on veut avoir la liste des fonctions s'intéressant à une certaine
  notion, on utilise  \code{help.search()} ou \code{??}. Par exemple :

{\small
<<eval=FALSE>>=
help.search("date")
# ou
??date
@
}
\noindent
donnent la liste de toutes les fonctions, classées par package, chargés ou seulement installés, où "date" apparaît.


  \item[\textbf{3}] Enfin quand on ne sait pas s'il existe une fonction pour une tâche, on peut,  depuis \RR, se renseigner
  sur le site de \RR. Exemple :

{\small
<<eval=FALSE>>=
RSiteSearch("gini")
@
}
\noindent
En dernier recours on peut chercher sur le Net. Ainsi en tapant  sur un moteur de recherche les mots:
\\
\verb"CRAN R date month example",
on obtient des renseignements pertinents sur la fa\c{c}on d'extraire le mois d'une date. Le mot \code{example} permet souvent de limiter les pages ;
de même
\\
\verb"CRAN package inequality"
 donne, parmi beaucoup de choses sans intérêt,  la liste des packages traitant de mesures  d'inégalité.
\end{trivlist}
Il faut systématiquement examiner l'aide en ligne des fonctions rencontrées dans ce livre. Même si l'usage en paraît évident, la fonction a souvent des options fort utiles dans d'autres circonstances.
De plus, les exemples contenus dans l'aide  sollicitent la réflexion du lecteur et sont très instructifs. On en tire le plus grand profit en les exécutant ligne à ligne.
\\[.3cm]
\textbf{Une erreur courante.}
Un nom de fonction est toujours suivi de parenthèses \verb"(...)", et inversement, \textit{seul un nom de fonction est suivi de parenthèses}.
Considérons le code suivant  :

{\small
\begin{verbatim}
> num=which.min(lait)
> t.lait = time(lait)
> cat('temps collecte minimale : ',t.lait(num),'\n')
Erreur dans cat("temps collecte minimale : ", t.lait(num), "\n") :
  impossible de trouver la fonction "t.lait"
\end{verbatim}
}
\noindent
 Dans ce code, \code{lait} est une série temporelle étudiée au chapitre 11. On repère le numéro de l'observation où la  série   est minimum.
Par \code{time()}, on  extrait le temps/date de cette série et on
veut imprimer le temps du minimum, à savoir,  \code{t.lait[num]}. Par erreur on a tapé des \verb"( )" au lieu de \verb"[ ]", \RR~croit donc que \code{t.lait} est une fonction,
qu'il ne  trouve évidemment pas. Le message d'erreur est donc clair.



\subsection{Comprendre et changer la structure d'un objet\label{R:struct}}
Dans \RR, les données multidimensionnelles sont stockées sous différentes formes : matrice, array,   dataframe... ou sous des combinaisons de tels objets. Un dataframe
est une collection de vecteurs de même longueur qu'on peut imaginer comme une matrice dont les  colonnes peuvent être de types variés
 alors que les colonnes
d'une matrice doivent être toutes de même type.
Une liste est une structure plus générale qu'un dataframe. C'est un groupe d'objets reliés entre eux,
qui peuvent être des vecteurs, des matrices, des listes... Pour savoir les noms des objets qui composent  une liste, on utilise \code{names()}.

Les fonctions de \RR~construisent et manipulent des objets. Ils peuvent être assez simples comme une matrice, un vecteur,  ou  complexes.
C'est le cas des objets  fabriqués par les fonctions statistiques telles que \code{lm()},  \code{ARIMA()}, qui effectuent un ajustement
linéaire,  une modélisation ARIMA... Les objets en sortie de ces fonctions peuvent être des listes, par exemple la liste de tous les
résultats d'un ajustement linéaire, ou des objets plus structurés appartenant  à    de grandes catégories appelées classes.
\code{plot()},  \code{summary()},  \code{print()}, \code{coef()} sont des fonctions  génériques, elles adaptent
leur action à la classe de l'objet auquel on les applique.
\code{class(a)}
donne la classe de l'objet \code{a}.
Il est parfois utile d'abandonner la classe d'un objet. On utilise pour cela   \code{unclass()}. Nous avons
 très souvent recours
 à \verb"str()"\index{str()@\code{str()}}, pour voir comment \RR~a importé un fichier de données
 (les entiers sont-ils restés des entiers, comment les dates ont-elles été comprises....),
pour trouver facilement les composantes d'une sortie d'un traitement statistique qui nous intéressent.
 \code{as.vector()}, \code{as.numeric()}, \code{as.Date()}... permettent de changer la structure d'un objet,
\code{unlist()} permet d'abandonner la structure de liste d'un objet. Ces fonctions sont d'un usage fréquent.
Par exemple, un vecteur et une matrice colonne ne sont généralement pas interchangeables et on aura parfois besoin de changer leur structure, et ce genre de code est d'un emploi
fréquent. Dans le code ci-dessous,  \code{x} et \code{y} sont des vecteurs, et \code{xmat} une matrice colonne :

{\small
<<eval=FALSE>>=
x = rnorm(10)
xmat = as.matrix(x, ncol=1)
y = as.vector(xmat[,1])
@
}
%%%%%%%%%%%%%%%%%%
~\\
\textbf{Classes S3.} Une liste avec un attribut \verb"class" associé indiquant de quel type de liste il s'agit, est une classe S3.
 On accède aux éléments d'une classe S3 par \verb"$".
Une classe S3 est une liste avec un attribut supplémentaire.
Si un objet d'une certaine classe est passé comme argument à une fonction, \RR~cherche une fonction nommée de fa\c{c}on appropriée pour les objets de cette classe.
Ainsi \code{summary()} est une fonction qui donne un résumé adapté aux sorties de différentes fonctions.
~\\
\textbf{Classes S4.}
Elles ont été ajoutées assez récemment à \RR.
Ces classes contiennent généralement à la fois des données et des fonctions, comme les classes S3, mais elles ont quelques avantages techniques. Pour notre usage il nous suffit de savoir
qu'on fait référence à leurs éléments par @ et non \verb"$".  Les données boursières 
récupérées    à l'aide de \pkg{its} sont de classe S4. Nous examinons   leur structure à la section 2.2.
 Les séries temporelles de type \texttt{timeSeries} sont des objets de classe S4, on en verra un exemple notamment au chapitre 8, \textit{Trafic mensuel de l'aéroport de Toulouse-Blagnac}.





\subsection{Exemple}
Nous nous intéresserons un peu plus loin aux structures de données temporelles. Examinons maintenant la structure d'une sortie d'ajustement
d'un modèle combinant une tendance linéaire et une erreur qui a une dynamique autorégressive simple.
Au chapitre 1, on a utilisé le code suivant :

{\small
<<label=r_st.huron>>=
require(forecast)
temps = time(LakeHuron)
mod.lac=Arima(LakeHuron,order=c(1,0,0),xreg= temps,method='ML')
@
}
\noindent
pour estimer le modèle :

 \begin{eqnarray}  
 y_t &=& \beta_0 + \beta_1 x_t + u_t, \;\; t=1,\cdots,T.
\\
 u_t &=& \phi u_{t-1} + z_t,\hspace{1cm} |\phi| < 1.
 \end{eqnarray}

 On obtient les résultats de l'estimation, valeur des coefficients notamment,
par \code{summary(mod.lac)}, opération que nous ferons souvent ; mais ici examinons  la structure de
 l'objet \verb"mod.lac".

{\small
<<label=r_st.huron.struc>>=
str(mod.lac, width=60, strict.width="cut")
@
}
\noindent
\index{str()@\code{str()}}Les options \code{width=60, strict.width="cut"} limitent la largeur du texte imprimé ; elles ne sont là que pour les besoins de la mise en page du livre et
 ne sont généralement pas  utilisées dans la pratique.
On voit que \code{mod.lac} est une liste de 15 objets dont    \verb"mod.lac$model" est lui-même une liste. On peut alors récupérer une composante
de la liste,  le coefficient du temps dans la régression...
On voit par exemple, que le nom de ce coefficient est \code{temps}, on peut donc, et c'est plus sûr que de repérer la position d'un terme dans un vecteur, le récupérer par son nom :

{\small
<<label=r_st.huron.coef>>=
residus= mod.lac$residuals
(coeftemps = mod.lac$coef[names(mod.lac$coef) == 'temps'])
@
}
\noindent
 \code{fitted()}, \code{residuals()}, \code{coefficients()} sont des fonctions génériques qui permettent également  de récupérer certains résultats.
Il arrive que les  sorties d'une fonction soient très abondantes et    dépassent la capacité de la console, si bien qu'on en perd le début. \code{sink()} permet d'orienter la sortie vers un fichier.
Par exemple  :

{\small
\begin{Verbatim}
sink('d:/outmod.txt')
mod.lac
sink()
\end{Verbatim}
}
\noindent
La première instruction  oriente la sortie vers le fichier texte \verb"outmod.txt" du répertoire \verb"D:", la deuxième écrit la structure de l'objet \verb"mod" dans ce fichier et la troisième, qu'il
ne faut pas oublier, redirige la sortie vers la console.

\end{document}